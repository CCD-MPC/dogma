import json

import conclave.dag as con_dag
import conclave.comp as comp

from policy_engine.net import setup_peer


class Verify:

    def __init__(self, protocol, policy: [str, dict], conf):

        self.protocol = con_dag.OpDag(protocol())
        self.config = conf
        self.policy = self.setup_policy(policy)
        self.pid = conf["user_config"]["pid"]
        # self.peer = self._setup_networked_peer()
        self.peer = None

    @staticmethod
    def setup_policy(p: [str, dict]):

        if isinstance(p, dict):
            return p
        elif isinstance(p, str):
            with open(p, 'r') as pol:
                return json.load(pol)
        else:
            raise Exception("TypeError: Policy must be either dict or JSON.\n")

    def _setup_networked_peer(self):

        return setup_peer(self.config, self.policy)

    def verify(self):
        """
        Verification method. Will need to traverse the DAG generated by
        the protocol and compare it against the policy for the given PID.
        """

        # policies = self.peer.get_policies_from_others()
        #
        # print(policies)

        if self.protocol:
            print("\n\n\n***Verified***\n\n\n")
            return True

        else:
            raise Exception("No protocol passed to PolicyEngine.")

    def rewrite_dag(self):

        return comp.rewrite_dag(self.protocol, self.config)
